<?php
defined('BASEPATH') OR exit('No direct script access allowed');

/**
 * Kbcore_menues Class
 *
 * Application menus builder.
 *
 * @package 	CodeIgniter
 * @category 	Libraries
 * @author 	Kader Bouyakoub <bkader@mail.com>
 * @link 	https://github.com/bkader
 */
class Kbcore_menus extends CI_Driver
{
	/**
	 * Holds array of menus locations.
	 * @var array
	 */
	private $_locations = array();

	/**
	 * Holds array of stored menus.
	 * @var array
	 */
	private $_menus = array();

	/**
	 * Holds an array of menus items.
	 * @var array
	 */
	private $_items = array();

	/**
	 * Class constructor.
	 * @return 	void
	 */
	public function __construct()
	{
		// Make sure to load HTML helper.
		get_instance()->load->helper(array('url', 'html', 'inflector'));
	}

	// ------------------------------------------------------------------------

	/**
	 * Add a new location.
	 * @access 	public
	 * @param 	string 	$location 	The location's name.
	 * @return 	object.
	 */
	public function add_location($location = 'primary')
	{
		if (empty($location))
		{
			show_error("The location's name is required.");
		}

		// Generate slug for the location.
		$location = $this->_string_to_slug($location);

		// Add the location only if it does not exists.
		if ( ! in_array($location, $this->_locations))
		{
			$this->_locations[] = $location;
			ksort($this->_locations);
		}

		return $this;
	}

	public function locations()
	{
		return $this->_locations;
	}

	// ------------------------------------------------------------------------

	/**
	 * Add a new menu group.
	 * @access 	public
	 * @param 	string 	$name 	The menu's name.
	 * @param 	string 	$slug 	The menu's slug.
	 * @return 	object
	 */
	public function add_menu($name, $location = null)
	{
		if (empty($name))
		{
			show_error("The menu's name is required to add a menu.");
		}

		// Multiple menus?
		if (is_array($name))
		{
			foreach ($name as $key => $value)
			{
				if (is_int($key))
				{
					$this->add_menu($value, $location);
				}
				else
				{
					$this->add_menu($value, $key);
				}
			}

			return $this;
		}

		// Create the menu's slug.
		(empty($slug)) && $slug = $this->_string_to_slug($name);

		// Add it only if it does not exist.
		if ( ! isset($this->_menus[$slug]))
		{
			// Add it to menus list.
			$this->_menus[$slug] = array(
				'name'     => $name,
				'slug'     => $slug,
			);
		}

		return $this;
	}

	public function menu_items($menu)
	{
		$items = array();
		$menu = $this->_string_to_slug($menu);
		if (isset($this->_items[$menu]))
		{
			$items = $this->_items[$menu];
		}

		return $items;
	}

	public function menus()
	{
		return $this->_menus;
	}

	// ------------------------------------------------------------------------

	public function add_item($title = null, $href = '#', $menu = 'main-menu', $order = 0, $parent = null)
	{
		// Make sure the $title is always filled.
		(empty($title)) && $title = $href;

		// Add the menu if it does not exist.
		$menu_slug = $this->_string_to_slug($menu);
		if ( ! isset($this->_menus[$menu_slug]))
		{
			$this->add_menu($this->_slug_to_string($menu));
		}

		// Generate item's ID.
		$item_id = md5($menu_slug.$title);
		$parent_id = (empty($parent)) ? null : md5($menu_slug.$parent);

		if ($parent !== null && isset($this->_items[$menu_slug][$parent_id]))
		{
			$this->_items[$menu_slug][$parent_id]['children'][] = array(
				'title'    => $title,
				'href'     => $href,
				'order'    => $order,
				'children' => null,
			);
		}
		else
		{
			$this->_items[$menu_slug][$item_id] = array(
				'title' => $title,
				'href' => $href,
				'order' => $order,
				'children' => null,
			);
		}

		return $this;
	}

	public function items()
	{
		return $this->_items;
	}

	// ------------------------------------------------------------------------

	public function build_menu($args = array())
	{
		$defaults = array(
			// Menu.
			'menu'      => null,
			'menu_tag'  => 'ul',
			'menu_attr' => array(),

			// Container.
			'container'      => 'div',
			'container_attr' => array(),

			// Text before and after the link markup.
			'before' => '',
			'after'  => '',

			// Anchor class and text before and after the link text.
			'link_before'      => '',
			'link_after'       => '',
			'link_attr'        => array(),
			'parent_link_attr' => array(),
		);

		// Merge everything.
		$args = array_replace($defaults, $args);

		// Extract every thing.
		extract($args);

		// No menu selected? Nothing to do.
		if (empty($menu))
		{
			return null;
		}

		// Make sure the 'menu' element is always a slug.
		$menu = $this->_string_to_slug($menu);

		// Make sure the menu has items.
		$items = $this->menu_items($menu);
		if (empty($items))
		{
			return null;
		}

		// Let's now generate the menu.
		$output = '%s';

		// Make sure to add the ID from the slug if not provided.
		(isset($menu_attr['id'])) OR $menu_attr['id'] = $menu;


		if ( ! empty($container))
		{
			$output = html_tag($args['container'], $container_attr, '%s');
		}

		$output = sprintf($output, html_tag($menu_tag, $menu_attr, '%s'));

		// Before anchors.
		if ($menu_tag == 'ul')
		{
			$before = (empty($before)) ? '<li>' : $before;
			$after  = (empty($after)) ? '<li>' : $after;
		}

		$items_output = '';
		foreach ($items as $item)
		{
			$has_children = ( ! empty($item['children']));

			// Add the href attribute.
			$link_attr['href'] = $item['href'];

			// Hash childre?
			if ($has_children)
			{
				$link_attr = array_merge($link_attr, $parent_link_attr);
				$before = '<li class="dropdow">';
			}

			$item_output = $before.html_tag('a', $link_attr, $link_before.$item['title'].$link_after);

			if ($has_children)
			{
				$item_output .= html_tag('ul', $child_menu_attr, '%s');

				$children_output = '';
				foreach ($item['children'] as $child)
				{
					$children_output .= html_tag('li', null, html_tag('a', array('href' => $child['href']), $child['title']));
				}

				$item_output = sprintf($item_output, $children_output);

			}
			$item_output .= $after;

			$items_output .= $item_output;
		}

		$output = sprintf($output, $items_output);

		return $output;
	}

	// ------------------------------------------------------------------------

	/**
	 * Generate a slug for a given string.
	 * @access 	private
	 * @param 	string 	$str 	the string to generate slug from.
	 * @return 	string
	 */
	private function _string_to_slug($str)
	{
		// If the string is already a slug, return it.
		if (preg_match('/^[a-z][-a-z0-9]*$/', $str))
		{
			return $str;
		}

		// Return it as-is if empty, otherwise, generate the slug.
		return (empty($str)) ? $str : url_title($str, '-', true);
	}

	// ------------------------------------------------------------------------

	/**
	 * Returns a humanized text from a slug.
	 * @access 	private
	 * @param 	string 	$slug 	The slug to humanize.
	 * @return 	string
	 */
	private function _slug_to_string($slug)
	{
		return (empty($slug)) ? $slug : humanize($slug, '-');
	}

	// ------------------------------------------------------------------------

	/**
	 * Initialize class.
	 * @access 	protected
	 * @return 	void
	 */
	public function initialize()
	{
		log_message('debug', 'Kbcore_menus Class Initialized');
	}

}

// --------------------------------------------------------------------

if ( ! function_exists('register_menu'))
{
	function register_menu($name, $location = 'primary')
	{
		return get_instance()->app->menus->add_menu($name, $location);
	}
}

// ------------------------------------------------------------------------

if ( ! function_exists('build_menu'))
{
	function build_menu($args = array())
	{
		return get_instance()->app->menus->build_menu($args);
	}
}
